[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://bskgybufv5mdr"]

[sub_resource type="Shader" id="Shader_6kcdj"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	vec3 nor2 = texture(texture_normal, base_uv*13.0f).rgb;
	vec3 nor3 = texture(texture_normal, base_uv*105.0f).rgb;
	vec3 nor4 = texture(texture_normal, base_uv*1017.0f).rgb;
	vec3 nor5 = texture(texture_normal, base_uv*10107.0f).rgb;
	NORMAL_MAP = texture(texture_normal, base_uv).rgb*0.2
		+ vec3(nor2.x, nor2.y, nor2.z)*0.2f
		+ vec3(nor3.x, nor3.y, nor3.z)*0.2f
		+ vec3(nor4.x, nor4.y, nor4.z)*0.2f
		+ vec3(nor5.x, nor5.y, nor5.z)*0.2f;
	NORMAL_MAP_DEPTH = normal_scale * 3.0f;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mm1mv"]
noise_type = 2
domain_warp_amplitude = 7.985
domain_warp_fractal_octaves = 10

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_h3ui7"]
width = 1024
height = 1024
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mm1mv")

[resource]
render_priority = 0
shader = SubResource("Shader_6kcdj")
shader_parameter/albedo = Color(0.699653, 0.699653, 0.699653, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.22
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/specular = 0.19
shader_parameter/metallic = 0.23
shader_parameter/texture_normal = SubResource("NoiseTexture2D_h3ui7")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(32, 32, 32)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
